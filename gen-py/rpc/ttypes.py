#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class NewsDetail:
  """
  Attributes:
   - news_id
   - news_title
   - news_content
   - news_type
   - news_data
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'news_id', None, None, ), # 1
    (2, TType.STRING, 'news_title', None, None, ), # 2
    (3, TType.STRING, 'news_content', None, None, ), # 3
    (4, TType.STRING, 'news_type', None, None, ), # 4
    (5, TType.STRING, 'news_data', None, None, ), # 5
  )

  def __init__(self, news_id=None, news_title=None, news_content=None, news_type=None, news_data=None,):
    self.news_id = news_id
    self.news_title = news_title
    self.news_content = news_content
    self.news_type = news_type
    self.news_data = news_data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.news_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.news_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.news_content = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.news_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.news_data = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewsDetail')
    if self.news_id is not None:
      oprot.writeFieldBegin('news_id', TType.I32, 1)
      oprot.writeI32(self.news_id)
      oprot.writeFieldEnd()
    if self.news_title is not None:
      oprot.writeFieldBegin('news_title', TType.STRING, 2)
      oprot.writeString(self.news_title)
      oprot.writeFieldEnd()
    if self.news_content is not None:
      oprot.writeFieldBegin('news_content', TType.STRING, 3)
      oprot.writeString(self.news_content)
      oprot.writeFieldEnd()
    if self.news_type is not None:
      oprot.writeFieldBegin('news_type', TType.STRING, 4)
      oprot.writeString(self.news_type)
      oprot.writeFieldEnd()
    if self.news_data is not None:
      oprot.writeFieldBegin('news_data', TType.STRING, 5)
      oprot.writeString(self.news_data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.news_id)
    value = (value * 31) ^ hash(self.news_title)
    value = (value * 31) ^ hash(self.news_content)
    value = (value * 31) ^ hash(self.news_type)
    value = (value * 31) ^ hash(self.news_data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class News:
  """
  Attributes:
   - news_id
   - news_title
   - news_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'news_id', None, None, ), # 1
    (2, TType.STRING, 'news_title', None, None, ), # 2
    (3, TType.STRING, 'news_type', None, None, ), # 3
  )

  def __init__(self, news_id=None, news_title=None, news_type=None,):
    self.news_id = news_id
    self.news_title = news_title
    self.news_type = news_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.news_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.news_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.news_type = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('News')
    if self.news_id is not None:
      oprot.writeFieldBegin('news_id', TType.I32, 1)
      oprot.writeI32(self.news_id)
      oprot.writeFieldEnd()
    if self.news_title is not None:
      oprot.writeFieldBegin('news_title', TType.STRING, 2)
      oprot.writeString(self.news_title)
      oprot.writeFieldEnd()
    if self.news_type is not None:
      oprot.writeFieldBegin('news_type', TType.STRING, 3)
      oprot.writeString(self.news_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.news_id)
    value = (value * 31) ^ hash(self.news_title)
    value = (value * 31) ^ hash(self.news_type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
